/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.plugin.bigquery;

import com.google.cloud.bigquery.ViewDefinition;
import io.airlift.json.JsonCodec;
import io.airlift.json.JsonCodecFactory;
import io.airlift.json.ObjectMapperProvider;
import io.trino.spi.connector.ConnectorViewDefinition;

import java.util.Base64;

import static com.google.common.base.Preconditions.checkArgument;

public final class ViewReaderUtil
{
    public static final ViewDefinition TRINO_VIEW_DEFINITION = ViewDefinition.of("SELECT 'Generated by Trino BigQuery connector'");

    private static final String VIEW_PREFIX = "/* Trino View: ";
    private static final String VIEW_SUFFIX = " */";
    private static final JsonCodec<ConnectorViewDefinition> VIEW_CODEC =
            new JsonCodecFactory(new ObjectMapperProvider()).jsonCodec(ConnectorViewDefinition.class);

    private ViewReaderUtil() {}

    public static ConnectorViewDefinition decodeViewData(String viewData)
    {
        checkArgument(viewData.startsWith(VIEW_PREFIX), "View data missing prefix: %s", viewData);
        checkArgument(viewData.endsWith(VIEW_SUFFIX), "View data missing suffix: %s", viewData);
        viewData = viewData.substring(VIEW_PREFIX.length());
        viewData = viewData.substring(0, viewData.length() - VIEW_SUFFIX.length());
        byte[] bytes = Base64.getDecoder().decode(viewData);
        return VIEW_CODEC.fromJson(bytes);
    }

    public static String encodeViewData(ConnectorViewDefinition definition)
    {
        byte[] bytes = VIEW_CODEC.toJsonBytes(definition);
        String data = Base64.getEncoder().encodeToString(bytes);
        return VIEW_PREFIX + data + VIEW_SUFFIX;
    }

    public static boolean isTrinoView(String description)
    {
        if (description == null) {
            return false;
        }
        return description.startsWith(VIEW_PREFIX) && description.endsWith(VIEW_SUFFIX);
    }
}
